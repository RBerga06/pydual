{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dual numbers and uncertainties","text":"<p><code>pydual</code> provides an implementation of autodifferentiation with dual numbers that allows to effortlessly model and propagate uncertainties through calculations.</p>"},{"location":"#example","title":"Example","text":"<pre><code>import numpy as np\nfrom pydual.core import dual\n\n# load/create data as a numpy array like you already do\nx_best = np.array([3.14, 4.20, 5.25, 6.32, 8.11])\nx_errs = np.array([0.01, 0.02, 0.01, 0.01, 0.02]) #(1)!\n\n# store the data as a dual number\nx = dual.from_data(x_best, sigma=x_errs) #(2)!\n\n# access the real and dual parts\nprint(x.dreal)  # the real part of `x`: original `x_best` data (3)\nprint(x.ddual)  # the dual part of `x`: embeds `x_errs` data (4)\n\n# evaluate uncertainties\nprint(x.ddual.std())  # evaluate the standard deviation of all random variables (5)\nprint(x.display())    # print `x` as an array of '&lt;best&gt; \u00b1 &lt;delta&gt;' elements (6)\n\n# calculate array sum\nprint(x.sum().display()) #(7)!\n\n# calculate unweighted array average (arithmetic mean)\nprint(x.average(weights=False).display())\n</code></pre> <ol> <li>Error bars on <code>x_best</code></li> <li>The <code>x</code> variable is a <code>dual</code> instance and represents a vector (1D array) of dual numbers: you can think of it as an array of random variables, all normally distributed (with standard deviations dictated by <code>x_errs</code>) and stochastically independent.</li> <li>This attribute is called <code>.dreal</code> to avoid confusion with the <code>.real</code> attribute of <code>complex</code> numbers (we currently don't support complex numbers in the real or dual parts, but we'd like to in the future) - the leading <code>d</code> stands for \u201cdual number\u201d.</li> <li>This attribute is called <code>.ddual</code> (and not <code>.dual</code>) for symmetry with <code>.dreal</code>.</li> <li>If the random variables are normally distributed, their standard deviations are the best estimators for uncertainties. Note that the result is equal to <code>x_errs</code>.</li> <li>The <code>.display()</code> method uses <code>.ddual.std()</code> under the hood, hence uncertainties are estimated this way.</li> <li>Note that the uncertainty is automatically calculated as the square root of the sum of the squares of the elements of <code>x.ddual.std()</code>, because they are independent.</li> </ol>"},{"location":"#future-directions","title":"Future directions","text":"<p><code>pydual</code> aims to implement the following features:</p> <ul> <li>Complex numbers support</li> <li>Custom/arbitrary error distribution (currently it implicitely only supports normal distributions)</li> <li>Full Array API support</li> </ul>"}]}